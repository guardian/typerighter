// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The rule manager stack matches the snapshot 1`] = `
Object {
  "Mappings": Object {
    "stagemapping": Object {
      "CODE": Object {
        "maxInstances": 2,
        "minInstances": 1,
      },
      "PROD": Object {
        "maxInstances": 2,
        "minInstances": 1,
      },
    },
  },
  "Parameters": Object {
    "AMITyperighterrulemanager": Object {
      "Description": "Amazon Machine Image ID for the app typerighter-rule-manager. Use this in conjunction with AMIgo to keep AMIs up to date.",
      "Type": "AWS::EC2::Image::Id",
    },
    "ClusterName": Object {
      "Default": "elk",
      "Description": "The value of the ElasticSearchCluster tag that this instance should join",
      "Type": "String",
    },
    "DistributionBucketName": Object {
      "Default": "/account/services/artifact.bucket",
      "Description": "SSM parameter containing the S3 bucket name holding distribution artifacts",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "LoggingStreamName": Object {
      "Default": "/account/services/logging.stream.name",
      "Description": "SSM parameter containing the Name (not ARN) on the kinesis stream",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "PrivateSubnets": Object {
      "Default": "/account/vpc/default/private.subnets",
      "Description": "Subnets to run the ASG and instances within",
      "Type": "AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>",
    },
    "PublicSubnets": Object {
      "Default": "/account/vpc/default/public.subnets",
      "Description": "Subnets to run load balancer within",
      "Type": "AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>",
    },
    "Stage": Object {
      "AllowedValues": Array [
        "CODE",
        "PROD",
      ],
      "Default": "CODE",
      "Description": "Stage name",
      "Type": "String",
    },
    "TLSCert": Object {
      "AllowedPattern": "arn:aws:[a-z0-9]*:[a-z0-9\\\\-]*:[0-9]{12}:.*",
      "ConstraintDescription": "Must be a valid ARN, eg: arn:partition:service:region:account-id:resource-id",
      "Description": "ARN of a TLS certificate to install on the load balancer",
      "Type": "String",
    },
    "VPC": Object {
      "Default": "/account/vpc/default/id",
      "Description": "Virtual Private Cloud to run EC2 instances within",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>",
    },
  },
  "Resources": Object {
    "ApplicationSecurityGroupTyperighterrulemanagerB7623A9C": Object {
      "Properties": Object {
        "GroupDescription": "HTTP",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": Array [
          Object {
            "Key": "App",
            "Value": "typerighter-rule-manager",
          },
          Object {
            "Key": "ElasticSearchCluster",
            "Value": Object {
              "Ref": "ClusterName",
            },
          },
          Object {
            "Key": "gu:cdk:version",
            "Value": "12.0.0",
          },
          Object {
            "Key": "Stack",
            "Value": "flexible",
          },
          Object {
            "Key": "Stage",
            "Value": Object {
              "Ref": "Stage",
            },
          },
        ],
        "VpcId": Object {
          "Ref": "VPC",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ApplicationSecurityGroupTyperighterrulemanagerfromrulemanagerLoadBalancerSecurityGroupTyperighterrulemanager5EF9EDFC90001600B5E1": Object {
      "Properties": Object {
        "Description": "Port 9000 LB to fleet",
        "FromPort": 9000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ApplicationSecurityGroupTyperighterrulemanagerB7623A9C",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "LoadBalancerSecurityGroupTyperighterrulemanager8C3589BD",
            "GroupId",
          ],
        },
        "ToPort": 9000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "AutoscalingGroupTyperighterrulemanagerASGD10ACAA6": Object {
      "Properties": Object {
        "HealthCheckGracePeriod": 300,
        "HealthCheckType": "ELB",
        "LaunchConfigurationName": Object {
          "Ref": "AutoscalingGroupTyperighterrulemanagerLaunchConfig7E2EBD16",
        },
        "MaxSize": Object {
          "Fn::FindInMap": Array [
            "stagemapping",
            Object {
              "Ref": "Stage",
            },
            "maxInstances",
          ],
        },
        "MinSize": Object {
          "Fn::FindInMap": Array [
            "stagemapping",
            Object {
              "Ref": "Stage",
            },
            "minInstances",
          ],
        },
        "Tags": Array [
          Object {
            "Key": "App",
            "PropagateAtLaunch": true,
            "Value": "typerighter-rule-manager",
          },
          Object {
            "Key": "ElasticSearchCluster",
            "PropagateAtLaunch": true,
            "Value": Object {
              "Ref": "ClusterName",
            },
          },
          Object {
            "Key": "gu:cdk:version",
            "PropagateAtLaunch": true,
            "Value": "12.0.0",
          },
          Object {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "rule-manager/AutoscalingGroupTyperighterrulemanager",
          },
          Object {
            "Key": "Stack",
            "PropagateAtLaunch": true,
            "Value": "flexible",
          },
          Object {
            "Key": "Stage",
            "PropagateAtLaunch": true,
            "Value": Object {
              "Ref": "Stage",
            },
          },
        ],
        "TargetGroupARNs": Array [
          Object {
            "Ref": "PublicTargetGroupTyperighterrulemanager247ECD9A",
          },
        ],
        "VPCZoneIdentifier": Object {
          "Ref": "PrivateSubnets",
        },
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
    },
    "AutoscalingGroupTyperighterrulemanagerInstanceProfileE976A2DF": Object {
      "Properties": Object {
        "Roles": Array [
          Object {
            "Ref": "InstanceRoleTyperighterrulemanagerC4CF9347",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "AutoscalingGroupTyperighterrulemanagerLaunchConfig7E2EBD16": Object {
      "DependsOn": Array [
        "InstanceRoleTyperighterrulemanagerC4CF9347",
      ],
      "Properties": Object {
        "AssociatePublicIpAddress": false,
        "IamInstanceProfile": Object {
          "Ref": "AutoscalingGroupTyperighterrulemanagerInstanceProfileE976A2DF",
        },
        "ImageId": Object {
          "Ref": "AMITyperighterrulemanager",
        },
        "InstanceType": "t4g.micro",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "GuHttpsEgressSecurityGroupTyperighterrulemanagerD8331A62",
              "GroupId",
            ],
          },
          Object {
            "Fn::GetAtt": Array [
              "ApplicationSecurityGroupTyperighterrulemanagerB7623A9C",
              "GroupId",
            ],
          },
        ],
        "UserData": Object {
          "Fn::Base64": Object {
            "Fn::Join": Array [
              "",
              Array [
                "#!/bin/bash -ev
mkdir /etc/gu

cat > /etc/gu/typerighter-rule-manager.conf <<-'EOF'
    include \\"application\\"
EOF

aws --quiet --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                " s3 cp s3://composer-dist/flexible/",
                Object {
                  "Ref": "Stage",
                },
                "/typerighter-rule-manager/typerighter-rule-manager.deb /tmp/package.deb
dpkg -i /tmp/package.deb",
              ],
            ],
          },
        },
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration",
    },
    "DescribeEC2PolicyFF5F9295": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:DescribeAutoScalingGroups",
                "ec2:DescribeTags",
                "ec2:DescribeInstances",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "describe-ec2-policy",
        "Roles": Array [
          Object {
            "Ref": "InstanceRoleTyperighterrulemanagerC4CF9347",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "GetDistributablePolicyTyperighterrulemanagerBAFF784F": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:aws:s3:::",
                    Object {
                      "Ref": "DistributionBucketName",
                    },
                    "/flexible/",
                    Object {
                      "Ref": "Stage",
                    },
                    "/typerighter-rule-manager/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GetDistributablePolicyTyperighterrulemanagerBAFF784F",
        "Roles": Array [
          Object {
            "Ref": "InstanceRoleTyperighterrulemanagerC4CF9347",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "GuHttpsEgressSecurityGroupTyperighterrulemanagerD8331A62": Object {
      "Properties": Object {
        "GroupDescription": "Allow all outbound HTTPS traffic",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound HTTPS traffic",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": Array [
          Object {
            "Key": "App",
            "Value": "typerighter-rule-manager",
          },
          Object {
            "Key": "ElasticSearchCluster",
            "Value": Object {
              "Ref": "ClusterName",
            },
          },
          Object {
            "Key": "gu:cdk:version",
            "Value": "12.0.0",
          },
          Object {
            "Key": "Stack",
            "Value": "flexible",
          },
          Object {
            "Key": "Stage",
            "Value": Object {
              "Ref": "Stage",
            },
          },
        ],
        "VpcId": Object {
          "Ref": "VPC",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "GuHttpsEgressSecurityGroupTyperighterrulemanagerfromrulemanagerLoadBalancerSecurityGroupTyperighterrulemanager5EF9EDFC900076DA885B": Object {
      "Properties": Object {
        "Description": "Load balancer to target",
        "FromPort": 9000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "GuHttpsEgressSecurityGroupTyperighterrulemanagerD8331A62",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "LoadBalancerSecurityGroupTyperighterrulemanager8C3589BD",
            "GroupId",
          ],
        },
        "ToPort": 9000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "GuLogShippingPolicy981BFE5A": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:aws:kinesis:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    Object {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GuLogShippingPolicy981BFE5A",
        "Roles": Array [
          Object {
            "Ref": "InstanceRoleTyperighterrulemanagerC4CF9347",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "InstanceRoleTyperighterrulemanagerC4CF9347": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "ec2.",
                      Object {
                        "Ref": "AWS::URLSuffix",
                      },
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Tags": Array [
          Object {
            "Key": "App",
            "Value": "typerighter-rule-manager",
          },
          Object {
            "Key": "ElasticSearchCluster",
            "Value": Object {
              "Ref": "ClusterName",
            },
          },
          Object {
            "Key": "gu:cdk:version",
            "Value": "12.0.0",
          },
          Object {
            "Key": "Stack",
            "Value": "flexible",
          },
          Object {
            "Key": "Stage",
            "Value": Object {
              "Ref": "Stage",
            },
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LoadBalancerSecurityGroupTyperighterrulemanager8C3589BD": Object {
      "Properties": Object {
        "GroupDescription": "Allow all inbound traffic via HTTPS",
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all inbound traffic via HTTPS",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": Array [
          Object {
            "Key": "App",
            "Value": "typerighter-rule-manager",
          },
          Object {
            "Key": "ElasticSearchCluster",
            "Value": Object {
              "Ref": "ClusterName",
            },
          },
          Object {
            "Key": "gu:cdk:version",
            "Value": "12.0.0",
          },
          Object {
            "Key": "Stack",
            "Value": "flexible",
          },
          Object {
            "Key": "Stage",
            "Value": Object {
              "Ref": "Stage",
            },
          },
        ],
        "VpcId": Object {
          "Ref": "VPC",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "LoadBalancerSecurityGroupTyperighterrulemanagertorulemanagerApplicationSecurityGroupTyperighterrulemanager04218BF390006D822E1A": Object {
      "Properties": Object {
        "Description": "Port 9000 LB to fleet",
        "DestinationSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ApplicationSecurityGroupTyperighterrulemanagerB7623A9C",
            "GroupId",
          ],
        },
        "FromPort": 9000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "LoadBalancerSecurityGroupTyperighterrulemanager8C3589BD",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 9000,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "LoadBalancerSecurityGroupTyperighterrulemanagertorulemanagerGuHttpsEgressSecurityGroupTyperighterrulemanagerCD72451690003661B6EF": Object {
      "Properties": Object {
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "GuHttpsEgressSecurityGroupTyperighterrulemanagerD8331A62",
            "GroupId",
          ],
        },
        "FromPort": 9000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "LoadBalancerSecurityGroupTyperighterrulemanager8C3589BD",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 9000,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "PandaAuthPolicy4E029301": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Resource": "arn:aws:s3:::pan-domain-auth-settings/*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "PandaAuthPolicy4E029301",
        "Roles": Array [
          Object {
            "Ref": "InstanceRoleTyperighterrulemanagerC4CF9347",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ParameterStoreReadTyperighterrulemanager4551E15C": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:aws:ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/",
                    Object {
                      "Ref": "Stage",
                    },
                    "/flexible/typerighter-rule-manager",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "parameter-store-read-policy",
        "Roles": Array [
          Object {
            "Ref": "InstanceRoleTyperighterrulemanagerC4CF9347",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "PublicListenerTyperighterrulemanager7E22B9E7": Object {
      "Properties": Object {
        "Certificates": Array [
          Object {
            "CertificateArn": Object {
              "Ref": "TLSCert",
            },
          },
        ],
        "DefaultActions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "PublicTargetGroupTyperighterrulemanager247ECD9A",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "PublicLoadBalancerTyperighterrulemanager69AA33ED",
        },
        "Port": 443,
        "Protocol": "HTTPS",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "PublicLoadBalancerTyperighterrulemanager69AA33ED": Object {
      "Properties": Object {
        "LoadBalancerAttributes": Array [
          Object {
            "Key": "deletion_protection.enabled",
            "Value": "true",
          },
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "LoadBalancerSecurityGroupTyperighterrulemanager8C3589BD",
              "GroupId",
            ],
          },
        ],
        "Subnets": Object {
          "Ref": "PublicSubnets",
        },
        "Tags": Array [
          Object {
            "Key": "App",
            "Value": "typerighter-rule-manager",
          },
          Object {
            "Key": "ElasticSearchCluster",
            "Value": Object {
              "Ref": "ClusterName",
            },
          },
          Object {
            "Key": "gu:cdk:version",
            "Value": "12.0.0",
          },
          Object {
            "Key": "Stack",
            "Value": "flexible",
          },
          Object {
            "Key": "Stage",
            "Value": Object {
              "Ref": "Stage",
            },
          },
        ],
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "PublicTargetGroupTyperighterrulemanager247ECD9A": Object {
      "Properties": Object {
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckPath": "/healthcheck",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 10,
        "HealthyThresholdCount": 2,
        "Port": 9000,
        "Protocol": "HTTP",
        "Tags": Array [
          Object {
            "Key": "App",
            "Value": "typerighter-rule-manager",
          },
          Object {
            "Key": "ElasticSearchCluster",
            "Value": Object {
              "Ref": "ClusterName",
            },
          },
          Object {
            "Key": "gu:cdk:version",
            "Value": "12.0.0",
          },
          Object {
            "Key": "Stack",
            "Value": "flexible",
          },
          Object {
            "Key": "Stage",
            "Value": Object {
              "Ref": "Stage",
            },
          },
        ],
        "TargetGroupAttributes": Array [
          Object {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "30",
          },
        ],
        "TargetType": "instance",
        "UnhealthyThresholdCount": 5,
        "VpcId": Object {
          "Ref": "VPC",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "SSMRunCommandPolicy244E1613": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ec2messages:AcknowledgeMessage",
                "ec2messages:DeleteMessage",
                "ec2messages:FailMessage",
                "ec2messages:GetEndpoint",
                "ec2messages:GetMessages",
                "ec2messages:SendReply",
                "ssm:UpdateInstanceInformation",
                "ssm:ListInstanceAssociations",
                "ssm:DescribeInstanceProperties",
                "ssm:DescribeDocumentParameters",
                "ssmmessages:CreateControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:OpenDataChannel",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ssm-run-command-policy",
        "Roles": Array [
          Object {
            "Ref": "InstanceRoleTyperighterrulemanagerC4CF9347",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
}
`;
